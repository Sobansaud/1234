// {
//   "extends": ["next/core-web-vitals", "next/typescript"]
// }


// {
//   "extends": [
//     "next/core-web-vitals",
//     "next/typescript"
//   ],
//   "rules": {
//     // Enforce optional chaining usage
//     "prefer-optional-chain": "warn", 
    
//     // Prevent unsafe use of optional chaining
//     "no-unsafe-optional-chaining": "error", 

//     // Prevent accessing properties of undefined
//     "no-undef": "warn",

//     // Warn about unused variables
//     "no-unused-vars": "warn",

//     // Enforce best practices for optional chaining
//     "no-implicit-coercion": "warn", 

//     // Ensure proper use of conditional rendering and undefined checks
//     "no-eq-null": "error",
//     "eqeqeq": "error"
//   }
// }














// {
//   "extends": ["next/core-web-vitals", "next/typescript"],
//   "parserOptions": {
//     "ecmaVersion": 2020,
//     "sourceType": "module"
//   },
//   "rules": {
//     // Unused variables (Set to 'warn' or 'off' to reduce strictness)
//     "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }], // Ignore unused function arguments prefixed with '_'
    
//     // Disallow 'any' type explicitly, force better typing
//     "@typescript-eslint/no-explicit-any": "error",

//     // Allow unused expressions like `condition && functionCall()` if it is intentional
//     "@typescript-eslint/no-unused-expressions": ["error", { "allowTernary": true, "allowShortCircuit": true }],
    
//     // Prefer 'const' over 'let' when a variable is never reassigned
//     "prefer-const": "error",

//     // React hook dependencies (Always include necessary dependencies)
//     "react-hooks/exhaustive-deps": ["warn", {
//       "additionalHooks": "(useRecoilValue|useSetRecoilState)"
//     }],

//     // Warn against using <img> instead of Next.js <Image> for performance reasons
//     "@next/next/no-img-element": "warn",

//     // Allow implicit returns in arrow functions
//     "arrow-body-style": ["error", "as-needed"],

//     // Avoid using unnecessary `return` in functions
//     "no-useless-return": "warn",

//     // Disallow unnecessary TypeScript types (which don't provide much value)
//     "@typescript-eslint/no-inferrable-types": ["warn", { "ignoreParameters": true, "ignoreProperties": true }],

//     // Enable other performance-related rules
//     "no-console": "warn",
//     "no-debugger": "warn"

    
   
  
// }}






// {
//   "extends": ["next/core-web-vitals", "next/typescript"],
//   "parserOptions": {
//     "ecmaVersion": 2020,
//     "sourceType": "module"
//   },
//   "rules": {
//     // Unused variables (Set to 'warn' or 'off' to reduce strictness)
//     "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }], // Ignore unused function arguments prefixed with '_'
    
//     // Disallow 'any' type explicitly, force better typing
//     "@typescript-eslint/no-explicit-any": "error",

//     // Allow unused expressions like `condition && functionCall()` if it is intentional
//     "@typescript-eslint/no-unused-expressions": ["error", { "allowTernary": true, "allowShortCircuit": true }],
    
//     // Prefer 'const' over 'let' when a variable is never reassigned
//     "prefer-const": "error",

//     // React hook dependencies (Always include necessary dependencies)
//     "react-hooks/exhaustive-deps": ["warn", {
//       "additionalHooks": "(useRecoilValue|useSetRecoilState)"
//     }],

//     // Warn against using <img> instead of Next.js <Image> for performance reasons
//     "@next/next/no-img-element": "warn",


//     // Avoid using unnecessary `return` in functions
//     "no-useless-return": "warn",

//     // Disallow unnecessary TypeScript types (which don't provide much value)
//     "@typescript-eslint/no-inferrable-types": ["warn", { "ignoreParameters": true, "ignoreProperties": true }],

//     // Enable other performance-related rules
//     "no-console": "warn",
//     "no-debugger": "warn"
//   }
// }
















// {
//   "extends": ["next/core-web-vitals", "next/typescript"],
//   "parserOptions": {
//     "ecmaVersion": 2020,
//     "sourceType": "module"
//   },
//   "rules": {
//     "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
//     "@typescript-eslint/no-explicit-any": "error",
//     "@typescript-eslint/no-unused-expressions": [
//       "error",
//       { "allowTernary": true, "allowShortCircuit": true }
//     ],
//     "prefer-const": "error",
//     "react-hooks/exhaustive-deps": [
//       "warn",
//       {
//         "additionalHooks": "(useRecoilValue|useSetRecoilState)"
//       }
//     ],
//     "@next/next/no-img-element": "warn",
//     "no-useless-return": "warn",
//     "@typescript-eslint/no-inferrable-types": [
//       "warn",
//       { "ignoreParameters": true, "ignoreProperties": true }
//     ],
//     "no-console": "warn",
//     "no-debugger": "warn"
//   }
// }












// {
//   "extends": ["next/core-web-vitals", "next/typescript"],
//   "parserOptions": {
//     "ecmaVersion": 2020,
//     "sourceType": "module"
//   },
//   "rules": {
//     "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
//     "@typescript-eslint/no-explicit-any": "error",
//     "@typescript-eslint/no-unused-expressions": [
//       "error",
//       { "allowTernary": true, "allowShortCircuit": true }
//     ],
//     "prefer-const": "error",
//     "react-hooks/exhaustive-deps": [
//       "warn",
//       {
//         "additionalHooks": "(useRecoilValue|useSetRecoilState)"
//       }
//     ],
//     "@next/next/no-img-element": "warn",
//     "no-useless-return": "warn",
//     "@typescript-eslint/no-inferrable-types": [
//       "warn",
//       { "ignoreParameters": true, "ignoreProperties": true }
//     ],
//     "no-console": "warn",
//     "no-debugger": "warn"
//   }
// }







{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ],
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": "./tsconfig.json"  // Ensure ESLint uses your tsconfig for type checking
  },
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      { "allowTernary": true, "allowShortCircuit": true }
    ],
    "prefer-const": "error",
    "react-hooks/exhaustive-deps": [
      "warn",
      {
        "additionalHooks": "(useRecoilValue|useSetRecoilState)"
      }
    ],
    "@next/next/no-img-element": "warn",
    "no-useless-return": "warn",
    "@typescript-eslint/no-inferrable-types": [
      "warn",
      { "ignoreParameters": true, "ignoreProperties": true }
    ],
    "no-console": "warn",
    "no-debugger": "warn",
    // Added rules for better TypeScript handling
    "@typescript-eslint/explicit-module-boundary-types": "off", // If you don't want to enforce type annotations on functions
    "react/prop-types": "off",  // If you're using TypeScript, you can disable this rule
    "@typescript-eslint/explicit-function-return-type": "warn" // Optional: Enforces return type annotations
  }
}
